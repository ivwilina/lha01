/**
 * SETUP SCRIPT - Kh·ªüi t·∫°o h·ªá th·ªëng h·ªçc t·ª´ v·ª±ng ti·∫øng Anh
 * 
 * Script n√†y s·∫Ω:
 * 1. T·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh
 * 2. Ki·ªÉm tra k·∫øt n·ªëi database
 * 3. Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u (n·∫øu c·∫ßn)
 * 4. C√†i ƒë·∫∑t c√°c c·∫•u h√¨nh c·∫ßn thi·∫øt
 * 
 * Ch·∫°y: node setup.js
 */

const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
const fs = require('fs');
const path = require('path');

// Import models
const Admin = require('./models/admin.model');
const User = require('./models/user.model');
const Category = require('./models/category.model');
const Word = require('./models/word.model');

// Database configuration
const databaseName = "onlineStudyDB";
const url = `mongodb://localhost:27017/${databaseName}`;

/**
 * K·∫øt n·ªëi ƒë·∫øn MongoDB
 */
async function connectDatabase() {
  try {
    await mongoose.connect(url);
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!');
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi database:', error.message);
    return false;
  }
}

/**
 * T·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh
 */
async function createDefaultAdmin() {
  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ admin n√†o ch∆∞a
    const existingAdmin = await Admin.findOne();
    if (existingAdmin) {
      console.log('üîç T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i:', existingAdmin.username);
      return;
    }

    // T·∫°o admin m·∫∑c ƒë·ªãnh
    const defaultAdminData = {
      username: 'admin',
      email: 'admin@system.local',
      password: 'admin123', // S·∫Ω ƒë∆∞·ª£c hash
      role: 'super_admin',
      isActive: true
    };

    // Hash password
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(defaultAdminData.password, saltRounds);
    
    const newAdmin = new Admin({
      ...defaultAdminData,
      password: hashedPassword,
      createdAt: new Date(),
      lastLogin: null
    });

    await newAdmin.save();
    
    console.log('‚úÖ T·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh th√†nh c√¥ng!');
    console.log('üìß Username: admin');
    console.log('üîë Password: admin123');
    console.log('‚ö†Ô∏è  Vui l√≤ng ƒë·ªïi m·∫≠t kh·∫©u sau khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu');
    
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o admin:', error.message);
  }
}

/**
 * Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c uploads
 */
function createUploadDirectories() {
  const uploadDirs = [
    './uploads',
    './uploads/temp',
    './uploads/csv',
    './uploads/excel'
  ];

  uploadDirs.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`üìÅ T·∫°o th∆∞ m·ª•c: ${dir}`);
    }
  });
}

/**
 * T·∫°o file c·∫•u h√¨nh m√¥i tr∆∞·ªùng m·∫´u
 */
function createEnvExample() {
  const envContent = `# Database Configuration
DB_NAME=onlineStudyDB
DB_URL=mongodb://localhost:27017/onlineStudyDB

# Server Configuration
PORT=3000
NODE_ENV=development

# JWT Secret (Thay ƒë·ªïi trong production)
JWT_SECRET=your_super_secret_jwt_key_here_change_in_production

# Admin Configuration
DEFAULT_ADMIN_USERNAME=admin
DEFAULT_ADMIN_PASSWORD=admin123

# File Upload Configuration
MAX_FILE_SIZE=5242880
UPLOAD_PATH=./uploads

# CORS Configuration
CORS_ORIGIN=http://localhost:5173
`;

  if (!fs.existsSync('.env.example')) {
    fs.writeFileSync('.env.example', envContent);
    console.log('üìÑ T·∫°o file .env.example');
  }
}

/**
 * Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u c∆° b·∫£n
 */
async function initializeSampleData() {
  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ d·ªØ li·ªáu ch∆∞a
    const categoryCount = await Category.countDocuments();
    const wordCount = await Word.countDocuments();
    
    if (categoryCount > 0 || wordCount > 0) {
      console.log('üîç D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫°o d·ªØ li·ªáu m·∫´u');
      return;
    }

    console.log('üìä T·∫°o d·ªØ li·ªáu m·∫´u...');

    // T·∫°o category m·∫´u
    const sampleCategories = [
      {
        categoryTopic: 'animals',
        totalWords: 0,
        words: []
      },
      {
        categoryTopic: 'colors',
        totalWords: 0,
        words: []
      },
      {
        categoryTopic: 'food',
        totalWords: 0,
        words: []
      }
    ];

    const categories = await Category.insertMany(sampleCategories);
    console.log(`‚úÖ T·∫°o ${categories.length} ch·ªß ƒë·ªÅ m·∫´u`);

    // T·∫°o words m·∫´u
    const sampleWords = [
      // Animals
      {
        word: 'cat',
        partOfSpeech: 'noun',
        ipa: '/k√¶t/',
        meaning: 'con m√®o',
        example: 'The cat is sleeping on the sofa.',
        exampleForQuiz: 'The ____ is sleeping on the sofa.'
      },
      {
        word: 'dog',
        partOfSpeech: 'noun',
        ipa: '/d…í…°/',
        meaning: 'con ch√≥',
        example: 'My dog loves to play in the garden.',
        exampleForQuiz: 'My ____ loves to play in the garden.'
      },
      // Colors
      {
        word: 'red',
        partOfSpeech: 'adjective',
        ipa: '/red/',
        meaning: 'm√†u ƒë·ªè',
        example: 'She is wearing a red dress.',
        exampleForQuiz: 'She is wearing a ____ dress.'
      },
      {
        word: 'blue',
        partOfSpeech: 'adjective',
        ipa: '/bluÀê/',
        meaning: 'm√†u xanh d∆∞∆°ng',
        example: 'The sky is blue today.',
        exampleForQuiz: 'The sky is ____ today.'
      },
      // Food
      {
        word: 'apple',
        partOfSpeech: 'noun',
        ipa: '/Àà√¶p…ôl/',
        meaning: 't√°o',
        example: 'I eat an apple every day.',
        exampleForQuiz: 'I eat an ____ every day.'
      }
    ];

    const words = await Word.insertMany(sampleWords);
    console.log(`‚úÖ T·∫°o ${words.length} t·ª´ v·ª±ng m·∫´u`);

    // C·∫≠p nh·∫≠t categories v·ªõi words
    await Category.findByIdAndUpdate(categories[0]._id, {
      totalWords: 2,
      words: [words[0]._id, words[1]._id]
    });

    await Category.findByIdAndUpdate(categories[1]._id, {
      totalWords: 2,
      words: [words[2]._id, words[3]._id]
    });

    await Category.findByIdAndUpdate(categories[2]._id, {
      totalWords: 1,
      words: [words[4]._id]
    });

    console.log('‚úÖ D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');

  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o d·ªØ li·ªáu m·∫´u:', error.message);
  }
}

/**
 * Ki·ªÉm tra c√°c package c·∫ßn thi·∫øt
 */
function checkRequiredPackages() {
  const requiredPackages = [
    'express',
    'mongoose',
    'bcrypt',
    'jsonwebtoken',
    'cors',
    'multer',
    'csv-parser',
    'xlsx'
  ];

  const packageJson = require('./package.json');
  const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };

  const missingPackages = requiredPackages.filter(pkg => !dependencies[pkg]);

  if (missingPackages.length > 0) {
    console.log('‚ö†Ô∏è  C√°c package c√≤n thi·∫øu:');
    missingPackages.forEach(pkg => console.log(`   - ${pkg}`));
    console.log('üì• Ch·∫°y: npm install ' + missingPackages.join(' '));
    return false;
  }

  console.log('‚úÖ T·∫•t c·∫£ package c·∫ßn thi·∫øt ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
  return true;
}

/**
 * Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng
 */
function displaySystemInfo() {
  console.log('\nüéâ THI·∫æT L·∫¨P H·ªÜ TH·ªêNG HO√ÄN T·∫§T!');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('üìö H·ªá th·ªëng h·ªçc t·ª´ v·ª±ng ti·∫øng Anh');
  console.log('üåê Backend API: http://localhost:3000');
  console.log('üñ•Ô∏è  Frontend: http://localhost:5173');
  console.log('üîß Admin Panel: http://localhost:5173/admin-system-panel-access');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  console.log('üë§ T√†i kho·∫£n admin:');
  console.log('   Username: admin');
  console.log('   Password: admin123');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
  console.log('üöÄ ƒê·ªÉ kh·ªüi ƒë·ªông h·ªá th·ªëng:');
  console.log('   Backend: npm run serve');
  console.log('   Frontend: npm run dev');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
}

/**
 * Main setup function
 */
async function setup() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p h·ªá th·ªëng...\n');

  // 1. Ki·ªÉm tra packages
  if (!checkRequiredPackages()) {
    process.exit(1);
  }

  // 2. K·∫øt n·ªëi database
  const dbConnected = await connectDatabase();
  if (!dbConnected) {
    process.exit(1);
  }

  // 3. T·∫°o th∆∞ m·ª•c uploads
  createUploadDirectories();

  // 4. T·∫°o file c·∫•u h√¨nh
  createEnvExample();

  // 5. T·∫°o admin m·∫∑c ƒë·ªãnh
  await createDefaultAdmin();

  // 6. T·∫°o d·ªØ li·ªáu m·∫´u
  await initializeSampleData();

  // 7. Hi·ªÉn th·ªã th√¥ng tin
  displaySystemInfo();

  // ƒê√≥ng k·∫øt n·ªëi
  await mongoose.disconnect();
  console.log('üìù Setup ho√†n t·∫•t. K·∫øt n·ªëi database ƒë√£ ƒë√≥ng.');
}

// Ch·∫°y setup
if (require.main === module) {
  setup().catch(error => {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh setup:', error);
    process.exit(1);
  });
}

module.exports = {
  setup,
  connectDatabase,
  createDefaultAdmin,
  initializeSampleData
};
